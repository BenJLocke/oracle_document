https://www.postgresql.org/docs/10/plpgsql.html
https://www.postgresql.org/docs/10/plpgsql-porting.html

The structure of a PL/pgSQL function
It doesn’t take much to get a PL/pgSQL function working. Here’s a basic example:
CREATE FUNCTION mid(varchar, integer, integer) RETURNS varchar
AS $$
BEGIN
RETURN substring($1,$2,$3);
END;
$$
LANGUAGE plpgsql;

----------------------
Accessing function arguments
CREATE FUNCTION mid(keyfield varchar, starting_point integer) RETURNS
varchar
AS
$$
BEGIN
RETURN substring(keyfield,starting_point);
END
$$
LANGUAGE plpgsql;

SELECT mid('Kirk L. Roybal',9);

  mid
--------
Roybal
(1 row)


CREATE OR REPLACE FUNCTION ambiguous(parameter varchar) RETURNS integer AS
$$
DECLARE retval integer;
BEGIN
INSERT INTO parameter (parameter) VALUES (parameter) RETURNING id INTO
retval;
RETURN retval;
END;
$$
LANGUAGE plpgsql;
SELECT ambiguous ('parameter');

---------------------------------------------
Conditional expressions

CREATE OR REPLACE FUNCTION format_us_full_name(
prefix text, firstname text,
mi text, lastname text,
suffix text)
RETURNS text AS
$$
DECLARE
fname_mi text;
fmi_lname text;
prefix_fmil text;
pfmil_suffix text;
BEGIN
fname_mi := CONCAT_WS(' ',
CASE trim(firstname)
WHEN ''
THEN NULL
ELSE firstname
END,
CASE trim(mi)
WHEN ''
THEN NULL
ELSE mi
END || '.');
fmi_lname := CONCAT_WS(' ',
CASE fname_mi
WHEN ''
THEN NULL
ELSE fname_mi
END,
CASE trim(lastname)
WHEN ''
THEN NULL
ELSE lastname
END);
prefix_fmil := CONCAT_WS('. ',
CASE trim(prefix)
WHEN ''
THEN NULL
ELSE prefix
END,
CASE fmi_lname
WHEN ''
THEN NULL
ELSE fmi_lname
END);
pfmil_suffix := CONCAT_WS(', ',
CASE prefix_fmil
WHEN ''
THEN NULL
ELSE prefix_fmil
END,
CASE trim(suffix)
WHEN ''
THEN NULL
ELSE suffix || '.'
END);
RETURN pfmil_suffix;
END;
$$
LANGUAGE plpgsql;

postgres=# SELECT format_us_full_name('Mr', 'Martin', 'L', 'King', 'Jr');
format_us_full_name
-------------------------
Mr. Martin L. King, Jr.
(1 row)

postgres=# SELECT format_us_full_name('', 'Martin', 'L', 'King', 'Jr');
format_us_full_name
---------------------
Martin L. King, Jr.
(1 row)


CREATE OR REPLACE FUNCTION format_us_full_name(
prefix text, firstname text,
mi text, lastname text,
suffix text)
RETURNS text AS
$$
DECLARE
fname_mi text;
fmi_lname text;
prefix_fmil text;
pfmil_suffix text;
BEGIN
fname_mi := CONCAT_WS(' ',
IF(trim(firstname) ='',NULL,firstname),
IF(trim(mi) = '', NULL, mi || '.')
);
fmi_lname := CONCAT_WS(' ',
IF(fname_mi = '',NULL, fname_mi),
IF(trim(lastname) = '', NULL, lastname)
);
prefix_fmil := CONCAT_WS('. ',
IF(trim(prefix) = '', NULL, prefix),
IF(fmi_lname = '', NULL, fmi_lname)
);
pfmil_suffix := CONCAT_WS(', ',
IF (prefix_fmil = '', NULL, prefix_fmil),
IF (trim(suffix) = '', NULL, suffix || '.')
);
RETURN pfmil_suffix;
END;
$$
LANGUAGE plpgsql;

---------------------------------------
Loops with counters
DECLARE
counter integer := 0;
a integer := 0;
b integer := 1;
BEGIN
IF (n < 1) THEN
RETURN 0;
END IF;
LOOP
EXIT WHEN counter = n;
counter := counter + 1;
SELECT b,a+b INTO a,b;
END LOOP;
RETURN a;
END;
$$
LANGUAGE plpgsql;

SELECT fib(4);

CREATE OR REPLACE FUNCTION fib(n integer)
RETURNS INTEGER
AS $$
DECLARE
counter integer := 0;
a integer := 0;
b integer := 1;
BEGIN
IF (n < 1) THEN
RETURN 0;
END IF;
FOR counter IN 1..n
LOOP
SELECT b,a+b INTO a,b;
END LOOP;
RETURN a;
END;
$$
LANGUAGE plpgsql;

-----------------------------
Looping through query results

FOR row IN
EXECUTE 'SELECT * FROM job_queue q WHERE NOT processed LIMIT 100'
LOOP
CASE row.process_type
WHEN 'archive_point_of_sale'
THEN INSERT INTO hist_orders (...)
SELECT… FROM orders
INNER JOIN order_detail…
INNER JOIN item…;
WHEN 'prune_archived_orders'
THEN DELETE FROM order_detail
WHERE order_id in (SELECT order_id FROM hist_orders);
DELETE FROM orders
WHERE order_id IN (SELECT order_id FROM hist_orders);
ELSE
RAISE NOTICE 'Unknown process_type: %', row.process_type;
END;
UPDATE job_queue SET processed = TRUE WHERE id = q.id;
END LOOP;


CREATE FUNCTION cs_refresh_mviews() RETURNS integer AS $$
DECLARE
mviews RECORD;
BEGIN
PERFORM cs_log('Refreshing materialized views…');
FOR mviews IN SELECT * FROM cs_materialized_views ORDER BY sort_key
LOOP
—Now "mviews" has one record from cs_materialized_views
PERFORM cs_log('Refreshing materialized view ' ||
quote_ident(mviews.mv_name) || ' ...');
EXECUTE 'TRUNCATE TABLE ' || quote_ident(mviews.mv_name);
EXECUTE 'INSERT INTO ' || quote_ident(mviews.mv_name) || ' ' ||
mviews.mv_query;
END LOOP;
PERFORM cs_log('Done refreshing materialized views.');
RETURN 1;
END;
$$ LANGUAGE plpgsql;




